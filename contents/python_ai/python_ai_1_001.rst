计算机组成
##################################################################################

|image0|

Python 基础入门
##################################################################################

Python 简介
**********************************************************************************

Python 介绍
==================================================================================

Python是时下最流行、最火爆的编程语言之一，具体原因如下：

1. 简单、易学，适应人群广泛

|image1|

2. 免费、开源

3. 应用领域广泛

|image2|

| 备注：以下知名框架均是Python语言开发。

::

	Google开源机器学习框架：TensorFlow
	开源社区主推学习框架：Scikit-learn
	百度开源深度学习框架：Paddle

| Python发展历史：https://baike.baidu.com/item/Python/407313?fr=aladdin

Python版本
==================================================================================

* Python 2.X
* Python 3.X

	* Python 3.5
	* Python 3.6
	* Python 3.7

总结
==================================================================================

* Python优点：

	* 学习成本低
	* 开源
	* 适应人群广泛
	* 应用领域广泛

* Python学习版本：3.7

Python 解释器
**********************************************************************************

* Python解释器作用：运行文件
* Python解释器种类

	* CPython，C语言开发的解释器[官方]，应用广泛的解释器。
	* IPython，基于CPython的一种交互式解释器。
	* 其他解释器
	
		* PyPy，基于Python语言开发的解释器。
		* Jython，运行在Java平台的解释器，直接把Python代码编译成Java字节码执行。
		* IronPython，运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。

* PyCharm 引入第三方的库

|image3|

注释
**********************************************************************************

* 注释的作用: 在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性。
* 注释的分类及语法

	* 单行注释 ``#``
	* 多行注释 ``"""``

示例如下:

.. code-block:: python

	# 常见问题诊断
	"""
	success_flag = True
	"""

变量
**********************************************************************************

变量的作用
==================================================================================

| 程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。
| 变量就是一个存储数据的的时候当前数据所在的内存地址的名字而已。

定义变量
==================================================================================

.. code-block:: python

	变量名 = 值

* 标识符

标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：

::

	- 由数字、字母、下划线组成
	- 不能数字开头
	- 不能使用内置关键字
	- 严格区分大小写

* 命名习惯

::

	- 见名知义。
	- 大驼峰：即每个单词首字母都大写，例如：`MyName`。
	- 小驼峰：第二个（含）以后的单词首字母大写，例如：`myName`。
	- 下划线：例如：`my_name`。

* 使用变量

.. code-block:: python

	my_name = 'TOM'
	print(my_name)

	schoolName = 'xxx'
	print(schoolName)

认识数据类型
==================================================================================

在 Python 里为了应对不同的业务需求，也把数据分为不同的类型

|image4|

# 数据类型

::

  - 整型：int
  - 浮点型：float
  - 字符串：str
  - 布尔型：bool
  - 元组：tuple
  - 集合：set
  - 字典：dict

* 检测数据类型的方法：`type()`

.. code-block:: python

	a = 1
	print(type(a))  # <class 'int'> -- 整型

	b = 1.1
	print(type(b))  # <class 'float'> -- 浮点型

	c = True
	print(type(c))  # <class 'bool'> -- 布尔型

	d = '12345'
	print(type(d))  # <class 'str'> -- 字符串

	e = [10, 20, 30]
	print(type(e))  # <class 'list'> -- 列表

	f = (10, 20, 30)
	print(type(f))  # <class 'tuple'> -- 元组

	h = {10, 20, 30}
	print(type(h))  # <class 'set'> -- 集合

	g = {'name': 'TOM', 'age': 20}
	print(type(g))  # <class 'dict'> -- 字典

输出
**********************************************************************************

所谓的格式化输出即按照一定的格式输出内容。

* 格式化符号

::

	| 格式符号 |          转换          |
	| :------: | :--------------------: |
	|  ==%s==  |         字符串         |
	|  ==%d==  |   有符号的十进制整数   |
	|  ==%f==  |         浮点数         |
	|    %c    |          字符          |
	|    %u    |    无符号十进制整数    |
	|    %o    |       八进制整数       |
	|    %x    | 十六进制整数（小写ox） |
	|    %X    | 十六进制整数（大写OX） |
	|    %e    | 科学计数法（小写'e'）  |
	|    %E    | 科学计数法（大写'E'）  |
	|    %g    |      %f和%e的简写      |
	|    %G    |      %f和%E的简写      |

技巧

::

	- %06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出
	- %.2f，表示小数点后显示的小数位数。

* 体验

格式化字符串除了%s，还可以写为`f'{表达式}'`

.. code-block:: python

	age = 18 
	name = 'TOM'
	weight = 75.5
	student_id = 1

	# 我的名字是TOM
	print('我的名字是%s' % name)

	# 我的学号是0001
	print('我的学号是%4d' % student_id)

	# 我的体重是75.50公斤
	print('我的体重是%.2f公斤' % weight)

	# 我的名字是TOM，今年18岁了
	print('我的名字是%s，今年%d岁了' % (name, age))

	# 我的名字是TOM，明年19岁了
	print('我的名字是%s，明年%d岁了' % (name, age + 1))

	# 我的名字是TOM，明年19岁了
	print(f'我的名字是{name}, 明年{age + 1}岁了')

f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。

* 转义字符

.. code-block:: python

	- `\n`：换行。
	- `\t`：制表符，一个tab键（4个空格）的距离。

* 结束符

想一想，为什么两个print会换行输出？

.. code-block:: python

	print('输出的内容', end="\n")

在Python中，print()， 默认自带`end="\n"`这个换行结束符，所以导致每两个`print`直接会换行展示，用户可以按需求更改结束符。

输入
**********************************************************************************

在Python中，程序接收用户输入的数据的功能即是输入。

* 输入的语法

``input("提示信息")``

* 输入的特点

::

	- 当程序执行到`input`，等待用户输入，输入完成之后才继续向下执行。
	- 在Python中，`input`接收用户输入后，一般存储到变量，方便使用。
	- 在Python中，`input`会把接收到的任意用户输入的数据都当做字符串处理。

代码示例: 

.. code-block:: python

	password = input('请输入您的密码：')

	print(f'您输入的密码是{password}')
	# <class 'str'>
	print(type(password))

转换数据类型
**********************************************************************************

* 转换数据类型的作用

| 问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？
| 答：转换数据类型即可，即将字符串类型转换成整型。

* 转换数据类型的函数

::

	|          函数          |                        说明                         |
	| :--------------------: | :-------------------------------------------------: |
	|  ==int(x [,base ])==   |                  将x转换为一个整数                  |
	|     ==float(x )==      |                 将x转换为一个浮点数                 |
	| complex(real [,imag ]) |        创建一个复数，real为实部，imag为虚部         |
	|      ==str(x )==       |                将对象 x 转换为字符串                |
	|        repr(x )        |             将对象 x 转换为表达式字符串             |
	|     ==eval(str )==     | 用来计算在字符串中的有效Python表达式,并返回一个对象 |
	|     ==tuple(s )==      |               将序列 s 转换为一个元组               |
	|      ==list(s )==      |               将序列 s 转换为一个列表               |
	|        chr(x )         |           将一个整数转换为一个Unicode字符           |
	|        ord(x )         |           将一个字符转换为它的ASCII整数值           |
	|        hex(x )         |         将一个整数转换为一个十六进制字符串          |
	|        oct(x )         |          将一个整数转换为一个八进制字符串           |
	|        bin(x )         |          将一个整数转换为一个二进制字符串           |

* demo 用例

.. code-block:: python

	# 1. 接收用户输入
	num = input('请输入您的幸运数字：')

	# 2. 打印结果
	print(f"您的幸运数字是{num}")


	# 3. 检测接收到的用户输入的数据类型 -- str类型
	print(type(num))

	# 4. 转换数据类型为整型 -- int类型
	print(type(int(num)))

	# 1. float() -- 转换成浮点型
	num1 = 1
	print(float(num1))
	print(type(float(num1)))

	# 2. str() -- 转换成字符串类型
	num2 = 10
	print(type(str(num2)))

	# 3. tuple() -- 将一个序列转换成元组
	list1 = [10, 20, 30]
	print(tuple(list1))
	print(type(tuple(list1)))


	# 4. list() -- 将一个序列转换成列表
	t1 = (100, 200, 300)
	print(list(t1))
	print(type(list(t1)))

	# 5. eval() -- 将字符串中的数据转换成Python表达式原本类型
	str1 = '10'
	str2 = '[1, 2, 3]'
	str3 = '(1000, 2000, 3000)'
	print(type(eval(str1)))
	print(type(eval(str2)))
	print(type(eval(str3)))

运算符
**********************************************************************************

* 运算符的分类

::

	- 算数运算符
	- 赋值运算符
	- 复合赋值运算符
	- 比较运算符
	- 逻辑运算符

算数运算符
==================================================================================

::

	| 运算符 |  描述  | 实例                                                  |
	| :----: | :----: | ----------------------------------------------------- |
	|   +    |   加   | 1 + 1 输出结果为 2                                    |
	|   -    |   减   | 1-1 输出结果为 0                                      |
	|   *    |   乘   | 2 * 2 输出结果为 4                                    |
	|   /    |   除   | 10 / 2 输出结果为 5                                   |
	|   //   |  整除  | 9 // 4 输出结果为2                                    |
	|   %    |  取余  | 9 % 4 输出结果为 1                                    |
	|   **   |  指数  | 2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2                |
	|   ()   | 小括号 | 小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9 |

.. tip::

	混合运算优先级顺序：`()`高于 `**` 高于 `*` `/` `//` `%` 高于 `+` `-`

赋值运算符
==================================================================================

.. code-block:: python

	| 运算符 | 描述 | 实例                                |
	| ------ | ---- | ----------------------------------- |
	| =      | 赋值 | 将`=`右侧的结果赋值给等号左侧的变量 |

	# 单个变量赋值
	num = 1
	print(num)

	# 多个变量赋值
	num1, float1, str1 = 10, 0.5, 'hello world'
	print(num1)
	print(float1)
	print(str1)

	# 多变量赋相同值
	a = b = 10
	print(a)
	print(b)

复合赋值运算符
==================================================================================

.. code-block:: python

	| 运算符 | 描述           | 实例                       |
	| ------ | -------------- | -------------------------- |
	| +=     | 加法赋值运算符 | c += a 等价于 c = c + a    |
	| -=     | 减法赋值运算符 | c -= a 等价于 c = c- a     |
	| *=     | 乘法赋值运算符 | c *= a 等价于 c = c * a    |
	| /=     | 除法赋值运算符 | c /= a 等价于 c = c / a    |
	| //=    | 整除赋值运算符 | c //= a 等价于 c = c // a  |
	| %=     | 取余赋值运算符 | c %= a 等价于 c = c % a    |
	| **=    | 幂赋值运算符   | c ** = a 等价于 c = c ** a |

	a = 100
	a += 1
	# 输出101  a = a + 1,最终a = 100 + 1
	print(a)

	b = 2
	b *= 3
	# 输出6  b = b * 3,最终b = 2 * 3
	print(b)

	c = 10
	c += 1 + 2
	# 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3
	print(c)

比较运算符
==================================================================================

比较运算符也叫关系运算符， 通常用来判断。

.. code-block:: python

	| 运算符 | 描述                                                         | 实例                                                        |
	| ------ | ------------------------------------------------------------ | ----------------------------------------------------------- |
	| ==     | 判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False) | 如a=3,b=3，则（a == b) 为 True                              |
	| !=     | 不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False) | 如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True |
	| >      | 运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假 | 如a=7,b=3，则(a > b) 为 True                                |
	| <      | 运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假 | 如a=7,b=3，则(a < b) 为 False                               |
	| >=     | 运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假 | 如a=7,b=3，则(a < b) 为 False如a=3,b=3，则(a >= b) 为 True  |
	| <=     | 运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假 | 如a=3,b=3，则(a <= b) 为 True                               |

	a = 7
	b = 5
	print(a == b)  # False
	print(a != b)  # True
	print(a < b)   # False
	print(a > b)   # True
	print(a <= b)  # False
	print(a >= b)  # True

逻辑运算符
==================================================================================

.. code-block:: python

	| 运算符 | 逻辑表达式 | 描述                                                         | 实例                                     |
	| ------ | ---------- | ------------------------------------------------------------ | ---------------------------------------- |
	| and    | x and y    | 布尔"与"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 | True and False， 返回 False。            |
	| or     | x or y     | 布尔"或"：如果 x 是 True，它返回 True，否则它返回 y 的值。   | False or True， 返回 True。              |
	| not    | not x      | 布尔"非"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 | not True 返回 False, not False 返回 True |

	a = 1
	b = 2
	c = 3
	print((a < b) and (b < c))  # True
	print((a > b) and (b < c))  # False
	print((a > b) or (b < c))   # True
	print(not (a > b))          # True

数字之间的逻辑运算

.. code-block:: python

	a = 0
	b = 1
	c = 2

	# and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字
	print(a and b)  # 0
	print(b and a)  # 0
	print(a and c)  # 0
	print(c and a)  # 0
	print(b and c)  # 2
	print(c and b)  # 1

	# or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字
	print(a or b)  # 1
	print(a or c)  # 2
	print(b or c)  # 1

流程控制之条件语句
##################################################################################

了解条件语句
**********************************************************************************

假设一个场景：

::

	- 同学们这个年龄去过网吧吗？
	- 去网吧进门想要上网必须做的一件事是做什么？（考虑重点）
	- 为什么要把身份证给工作人员？
	- 是不是就是为了判断是否成年？
	- 是不是如果成年可以上网？如果不成年则不允许上网？

其实这里所谓的判断就是条件语句，即**条件成立执行某些代码，条件不成立则不执行这些代码**。

if 语法
**********************************************************************************

.. code-block:: python

	if True:
	    print('条件成立执行的代码1')
	    print('条件成立执行的代码2')

	# 下方的代码没有缩进到if语句块，所以和if条件无关
	print('我是无论条件是否成立都要执行的代码')

if...else...
**********************************************************************************

.. code-block:: python

	age = int(input('请输入您的年龄：'))

	if age >= 18:
	    print(f'您的年龄是{age},已经成年，可以上网')
	else:
	    print(f'您的年龄是{age},未成年，请自行回家写作业')

	print('系统关闭')

多重判断
**********************************************************************************

.. code-block:: python

	if 条件1:
	    条件1成立执行的代码1
	    条件1成立执行的代码2
	    ......
	elif 条件2：
		条件2成立执行的代码1
	    条件2成立执行的代码2
	    ......
	......
	else:
	    以上条件都不成立执行执行的代码

多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。

if嵌套
**********************************************************************************

思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？

.. code-block:: python

	if 条件1：
		条件1成立执行的代码
	    条件1成立执行的代码
	    
	    if 条件2：
	    	条件2成立执行的代码
	        条件2成立执行的代码

	1. 如果有钱，则可以上车
	    2. 上车后，如果有空座，可以坐下
	    上车后，如果没有空座，则站着等空座位
	如果没钱，不能上车
	# 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座
	money = 1
	seat = 0
	if money == 1:
	    print('土豪，不差钱，顺利上车')
	    if seat == 1:
	        print('有空座，可以坐下')
	    else:
	        print('没有空座，站等')
	else:
	    print('没钱，不能上车，追着公交车跑')

三目运算符
**********************************************************************************

三目运算符也叫三元运算符。

.. code-block:: python

	值1 if 条件 else 值2

	a = 1
	b = 2

	c = a if a > b else b

循环
##################################################################################

循环的作用
**********************************************************************************

在Python中，循环分为`while`和`for`两种，最终实现效果相同。

while 语法:

::

	while 条件:
	    条件成立重复执行的代码1
	    条件成立重复执行的代码2
	    ......

示例:

.. code-block:: python

	# 循环的计数器
	i = 0
	while i < 5:
	    print('媳妇儿，我错了')
	    i += 1

	print('任务结束')

应用一：计算1-100累加和

.. code-block:: python

	i = 1
	result = 0
	while i <= 100:
	    result += i
	    i += 1

	# 输出5050
	print(result)

应用二：计算1-100偶数累加和

::

	- 偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加
	- 初始值为0 / 2 , 计数器每次累加2

.. code-block:: python

	# 方法一：条件判断和2取余数为0则累加计算
	i = 1
	result = 0
	while i <= 100:
	    if i % 2 == 0:
	        result += i
	    i += 1

	# 输出2550
	print(result)

	# 方法二：计数器控制增量为2
	i = 0
	result = 0
	while i <= 100:
	    result += i
	    i += 2

	# 输出2550
	print(result)

break 和 continue
**********************************************************************************

break和continue是循环中满足一定条件退出循环的两种不同方式。

举例：一共吃5个苹果，吃完第一个，吃第二个…，这里"吃苹果"的动作是不是重复执行？

情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即==终止此循环==。

.. code-block:: python

	i = 1
	while i <= 5:
	    if i == 4:
	        print(f'吃饱了不吃了')
	        break
	    print(f'吃了第{i}个苹果')
	    i += 1

情况二：如果吃的过程中，吃到第三个吃出一个大虫子...,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即==退出当前一次循环继而执行下一次循环代码==。

.. code-block:: python

	i = 1
	while i <= 5:
	    if i == 3:
	        print(f'大虫子，第{i}个不吃了')
	        # 在continue之前一定要修改计数器，否则会陷入死循环
	        i += 1
	        continue
	    print(f'吃了第{i}个苹果')
    i += 1

while 循环嵌套
**********************************************************************************

故事梗概：有天女朋友又生气了，惩罚：说3遍“媳妇儿， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？

.. code-block:: python

	while 条件:
	    print('媳妇儿， 我错了')
	print('刷晚饭的碗')

但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？

.. code-block:: python

	while 条件:
	    while 条件:
	        print('媳妇儿， 我错了')
	    print('刷晚饭的碗')

while 循环嵌套应用
**********************************************************************************

* 应用一：打印星号(正方形)

::

	*****
	*****
	*****
	*****
	*****

.. code-block:: python

	# 重复打印5行星星
	j = 0
	while j <= 4:
	    # 一行星星的打印
	    i = 0
	    while i <= 4:
	        # 一行内的星星不能换行，取消print默认结束符\n
	        print('*', end='')
	        i += 1
	    # 每行结束要换行，这里借助一个空的print，利用print默认结束符换行
	    print()
	    j += 1

* 应用二：打印星号(三角形)

::

	*
	**
	***
	****
	*****

分析：==一行输出星星的个数和行号是相等的==，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。

.. code-block:: python

	# 重复打印5行星星
	# j表示行号
	j = 0
	while j <= 4:
	    # 一行星星的打印
	    i = 0
	    # i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动
	    while i <= j:
	        print('*', end='')
	        i += 1
	    print()
	    j += 1

* 九九乘法表

.. code-block:: python

	# 重复打印9行表达式
	j = 1
	while j <= 9:
	    # 打印一行里面的表达式 a * b = a*b
	    i = 1
	    while i <= j:
	        print(f'{i}*{j}={j*i}', end='\t')
	        i += 1
	    print()
	    j += 1

for 循环
**********************************************************************************

::

	for 临时变量 in 序列:
	    重复执行的代码1
	    重复执行的代码2
	    ......

* break

.. code-block:: python

	str1 = 'itheima'
	for i in str1:
	    if i == 'e':
	        print('遇到e不打印')
	        break
	    print(i)

* continue

.. code-block:: python

	str1 = 'itheima'
	for i in str1:
	    if i == 'e':
	        print('遇到e不打印')
	        continue
	    print(i)

else
**********************************************************************************

循环可以和else配合使用，else下方缩进的代码指的是==当循环正常结束之后要执行的代码==。

需求：女朋友生气了，要惩罚：连续说5遍“媳妇儿，我错了”，如果道歉正常完毕女朋友就原谅我了，这个程序怎么写？

::

	while 条件:
	    条件成立重复执行的代码
	else:
	    循环正常结束之后要执行的代码

.. code-block:: python

	i = 1
	while i <= 5:
	    print('媳妇儿，我错了')
	    i += 1
	else:
	    print('媳妇原谅我了，真开心，哈哈哈哈')

* 退出循环的方式

需求：女朋友生气，要求道歉5遍：媳妇儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：

::

	- 更生气，不打算原谅，也不需要道歉了，程序如何书写？
	- 只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？

.. code-block:: python

	i = 1
	while i <= 5:
	    if i == 3:
	        print('这遍说的不真诚')
	        break
	    print('媳妇儿，我错了')
	    i += 1
	else:
	    print('媳妇原谅我了，真开心，哈哈哈哈')

所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。

.. code-block:: python

	i = 1
	while i <= 5:
	    if i == 3:
	        print('这遍说的不真诚')
	        i += 1
	        continue
	    print('媳妇儿，我错了')
	    i += 1
	else:
	    print('媳妇原谅我了，真开心，哈哈哈哈')

因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。

* for...else

语法

::

	for 临时变量 in 序列:
	    重复执行的代码
	    ...
	else:
	    循环正常结束之后要执行的代码

所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。

.. code-block:: python

	str1 = 'itheima'
	for i in str1:
	    print(i)
	else:
	    print('循环正常结束之后执行的代码')

* break终止循环

.. code-block:: python

	str1 = 'itheima'
	for i in str1:
	    if i == 'e':
	        print('遇到e不打印')
	        break
	    print(i)
	else:
	    print('循环正常结束之后执行的代码')

* continue控制循环

.. code-block:: python

	str1 = 'itheima'
	for i in str1:
	    if i == 'e':
	        print('遇到e不打印')
	        continue
	    print(i)
	else:
	    print('循环正常结束之后执行的代码')

因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。


.. |image0| image:: /_static/python_ai/computer.jpg
.. |image1| image:: /_static/python_ai/image-20190110163249963.png
.. |image2| image:: /_static/python_ai/image-20190110162845453-7108925.png
.. |image3| image:: /_static/python_ai/WX20201106-155049@2x.webp
.. |image4| image:: /_static/python_ai/image-20190111124628584-7181988.png









































































































































