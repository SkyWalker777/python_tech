Pandas 实现 groupby 聚合后不同列数据统计
-------------------------------------

电影评分数据集（UserID，MovieID，Rating，Timestamp）

| 聚合后单列-单指标统计：每个 MovieID 的平均评分

  | df.groupby(“MovieID”)[“Rating”].mean()

| 聚合后单列-多指标统计：每个MoiveID的最高评分、最低评分、平均评分

  | df.groupby(“MovieID”)[“Rating”].agg(mean=“mean”, max=“max”,min=np.min)
  | df.groupby(“MovieID”).agg({“Rating”:[‘mean’, ‘max’, np.min]})

| 聚合后多列-多指标统计：每个MoiveID的评分人数，最高评分、最低评分、平均评分

  | df.groupby(“MovieID”).agg( rating_mean=(“Rating”, “mean”),user_count=(“UserID”, lambda x : x.nunique())
  | df.groupby(“MovieID”).agg( {“Rating”: [‘mean’, ‘min’, ‘max’],“UserID”: lambda x :x.nunique()})
  | df.groupby(“MovieID”).apply( lambda x: pd.Series( {“min”:x[“Rating”].min(), “mean”: x[“Rating”].mean()}))

| 记忆：agg(新列名=函数)、agg(新列名=(原列名，函数))、agg({“原列名”：函数/列表})
| agg函数的两种形式，等号代表“把结果赋值给新列”，字典/元组代表“对这个列运用这些函数”

官网文档：https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.core.groupby.DataFrameGroupBy.agg.html

读取数据
~~~~~~~~

.. code:: ipython3

    import pandas as pd
    import numpy as np

.. code:: ipython3

    df = pd.read_csv(
        "./datas/movielens-1m/ratings.dat", 
        sep="::",
        engine='python', 
        names="UserID::MovieID::Rating::Timestamp".split("::")
    )

.. code:: ipython3

    df.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>UserID</th>
          <th>MovieID</th>
          <th>Rating</th>
          <th>Timestamp</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>1193</td>
          <td>5</td>
          <td>978300760</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>661</td>
          <td>3</td>
          <td>978302109</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>914</td>
          <td>3</td>
          <td>978301968</td>
        </tr>
      </tbody>
    </table>
    </div>



聚合后单列-单指标统计
~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    # 每个MovieID的平均评分
    result = df.groupby("MovieID")["Rating"].mean()
    result.head()




.. parsed-literal::

    MovieID
    1    4.146846
    2    3.201141
    3    3.016736
    4    2.729412
    5    3.006757
    Name: Rating, dtype: float64



.. code:: ipython3

    type(result)




.. parsed-literal::

    pandas.core.series.Series



聚合后单列-多指标统计
~~~~~~~~~~~~~~~~~~~~~

每个MoiveID的最高评分、最低评分、平均评分

方法1：agg函数传入多个结果列名=函数名形式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    result = df.groupby("MovieID")["Rating"].agg(
        mean="mean", max="max", min=np.min
    )
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean</th>
          <th>max</th>
          <th>min</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>5</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
    </div>



方法2：agg函数传入字典，key是column名，value是函数列表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    # 每个MoiveID的最高评分、最低评分、平均评分
    result = df.groupby("MovieID").agg(
        {"Rating":['mean', 'max', np.min]}
    )
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead tr th {
            text-align: left;
        }
    
        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="3" halign="left">Rating</th>
        </tr>
        <tr>
          <th></th>
          <th>mean</th>
          <th>max</th>
          <th>amin</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>5</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    result.columns = ['age_mean', 'age_min', 'age_max']
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>age_mean</th>
          <th>age_min</th>
          <th>age_max</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>5</td>
          <td>1</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>5</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
    </div>



聚合后多列-多指标统计
~~~~~~~~~~~~~~~~~~~~~

每个MoiveID的评分人数，最高评分、最低评分、平均评分

方法1：agg函数传入字典，key是原列名，value是原列名和函数元组
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    # 回忆：agg函数的两种形式，等号代表“把结果赋值给新列”，字典/元组代表“对这个列运用这些函数”
    result = df.groupby("MovieID").agg(
            rating_mean=("Rating", "mean"),
            rating_min=("Rating", "min"),
            rating_max=("Rating", "max"),
            user_count=("UserID", lambda x : x.nunique())
    )
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>rating_mean</th>
          <th>rating_min</th>
          <th>rating_max</th>
          <th>user_count</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>1</td>
          <td>5</td>
          <td>2077</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>1</td>
          <td>5</td>
          <td>701</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>1</td>
          <td>5</td>
          <td>478</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>1</td>
          <td>5</td>
          <td>170</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>1</td>
          <td>5</td>
          <td>296</td>
        </tr>
      </tbody>
    </table>
    </div>



方法2：agg函数传入字典，key是原列名，value是函数列表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

统计后是二级索引，需要做索引处理

.. code:: ipython3

    result = df.groupby("MovieID").agg(
        {
            "Rating": ['mean', 'min', 'max'],
            "UserID": lambda x :x.nunique()
        }
    )
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead tr th {
            text-align: left;
        }
    
        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="3" halign="left">Rating</th>
          <th>UserID</th>
        </tr>
        <tr>
          <th></th>
          <th>mean</th>
          <th>min</th>
          <th>max</th>
          <th>&lt;lambda&gt;</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>1</td>
          <td>5</td>
          <td>2077</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>1</td>
          <td>5</td>
          <td>701</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>1</td>
          <td>5</td>
          <td>478</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>1</td>
          <td>5</td>
          <td>170</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>1</td>
          <td>5</td>
          <td>296</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    result["Rating"].head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean</th>
          <th>min</th>
          <th>max</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>1</td>
          <td>5</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>1</td>
          <td>5</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>1</td>
          <td>5</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    result.columns = ["rating_mean", "rating_min","rating_max","user_count"]
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>rating_mean</th>
          <th>rating_min</th>
          <th>rating_max</th>
          <th>user_count</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>1</td>
          <td>5</td>
          <td>2077</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>1</td>
          <td>5</td>
          <td>701</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>1</td>
          <td>5</td>
          <td>478</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>1</td>
          <td>5</td>
          <td>170</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>1</td>
          <td>5</td>
          <td>296</td>
        </tr>
      </tbody>
    </table>
    </div>



方法3：使用groupby之后apply对每个子df单独统计
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    def agg_func(x):
        """注意，这个x是子DF"""
        
        # 这个Series会变成一行，字典KEY是列名
        return pd.Series({
            "rating_mean": x["Rating"].mean(),
            "rating_min": x["Rating"].min(),
            "rating_max": x["Rating"].max(),
            "user_count": x["UserID"].nunique()
        })
    
    result = df.groupby("MovieID").apply(agg_func)
    result.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>rating_mean</th>
          <th>rating_min</th>
          <th>rating_max</th>
          <th>user_count</th>
        </tr>
        <tr>
          <th>MovieID</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>4.146846</td>
          <td>1.0</td>
          <td>5.0</td>
          <td>2077.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3.201141</td>
          <td>1.0</td>
          <td>5.0</td>
          <td>701.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.016736</td>
          <td>1.0</td>
          <td>5.0</td>
          <td>478.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.729412</td>
          <td>1.0</td>
          <td>5.0</td>
          <td>170.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.006757</td>
          <td>1.0</td>
          <td>5.0</td>
          <td>296.0</td>
        </tr>
      </tbody>
    </table>
    </div>



