Pandas结合Sklearn实现泰坦尼克存活率预测
---------------------------------------

实例目标：实现泰坦尼克存活预测
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 处理步骤：
| 1、输入数据：使用Pandas读取训练数据(历史数据，特点是已经知道了这个人最后有没有活下来)
| 2、训练模型：使用Sklearn训练模型
| 3、使用模型：对于一个新的不知道存活的人，预估他存活的概率

步骤1：读取训练数据
~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    import pandas as pd

.. code:: ipython3

    df_train = pd.read_csv("./datas/titanic/titanic_train.csv")
    df_train.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>PassengerId</th>
          <th>Survived</th>
          <th>Pclass</th>
          <th>Name</th>
          <th>Sex</th>
          <th>Age</th>
          <th>SibSp</th>
          <th>Parch</th>
          <th>Ticket</th>
          <th>Fare</th>
          <th>Cabin</th>
          <th>Embarked</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>0</td>
          <td>3</td>
          <td>Braund, Mr. Owen Harris</td>
          <td>male</td>
          <td>22.0</td>
          <td>1</td>
          <td>0</td>
          <td>A/5 21171</td>
          <td>7.2500</td>
          <td>NaN</td>
          <td>S</td>
        </tr>
        <tr>
          <th>1</th>
          <td>2</td>
          <td>1</td>
          <td>1</td>
          <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
          <td>female</td>
          <td>38.0</td>
          <td>1</td>
          <td>0</td>
          <td>PC 17599</td>
          <td>71.2833</td>
          <td>C85</td>
          <td>C</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3</td>
          <td>1</td>
          <td>3</td>
          <td>Heikkinen, Miss. Laina</td>
          <td>female</td>
          <td>26.0</td>
          <td>0</td>
          <td>0</td>
          <td>STON/O2. 3101282</td>
          <td>7.9250</td>
          <td>NaN</td>
          <td>S</td>
        </tr>
        <tr>
          <th>3</th>
          <td>4</td>
          <td>1</td>
          <td>1</td>
          <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
          <td>female</td>
          <td>35.0</td>
          <td>1</td>
          <td>0</td>
          <td>113803</td>
          <td>53.1000</td>
          <td>C123</td>
          <td>S</td>
        </tr>
        <tr>
          <th>4</th>
          <td>5</td>
          <td>0</td>
          <td>3</td>
          <td>Allen, Mr. William Henry</td>
          <td>male</td>
          <td>35.0</td>
          <td>0</td>
          <td>0</td>
          <td>373450</td>
          <td>8.0500</td>
          <td>NaN</td>
          <td>S</td>
        </tr>
      </tbody>
    </table>
    </div>



**其中，Survived==1代表这个人活下来了、==0代表没活下来；其他的都是这个人的信息和当时的仓位、票务情况**

.. code:: ipython3

    # 我们只挑选两列，作为预测需要的特征
    feature_cols = ['Pclass', 'Parch']
    X = df_train.loc[:, feature_cols]
    X.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Pclass</th>
          <th>Parch</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>3</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>3</td>
          <td>0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>3</td>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    # 单独提取是否存活的列，作为预测的目标
    y = df_train.Survived
    y.head()




.. parsed-literal::

    0    0
    1    1
    2    1
    3    1
    4    0
    Name: Survived, dtype: int64



步骤2：训练模型
~~~~~~~~~~~~~~~

.. code:: ipython3

    from sklearn.linear_model import LogisticRegression
    # 创建模型对象
    logreg = LogisticRegression()
    
    # 实现模型训练
    logreg.fit(X, y)


.. parsed-literal::

    //anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.
      FutureWarning)




.. parsed-literal::

    LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                       intercept_scaling=1, l1_ratio=None, max_iter=100,
                       multi_class='warn', n_jobs=None, penalty='l2',
                       random_state=None, solver='warn', tol=0.0001, verbose=0,
                       warm_start=False)



.. code:: ipython3

    logreg.score(X, y)




.. parsed-literal::

    0.6879910213243546



步骤3：对于未知数据使用模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~

机器学习的核心目标，是使用模型预测未知的事物

比如预测股票明天是涨还是跌、一套新的二手房成交价大概多少钱、用户打开APP最可能看那些视频等问题

.. code:: ipython3

    # 找一个历史数据中不存在的数据
    X.drop_duplicates().sort_values(by=["Pclass", "Parch"])




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Pclass</th>
          <th>Parch</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>0</td>
        </tr>
        <tr>
          <th>54</th>
          <td>1</td>
          <td>1</td>
        </tr>
        <tr>
          <th>27</th>
          <td>1</td>
          <td>2</td>
        </tr>
        <tr>
          <th>438</th>
          <td>1</td>
          <td>4</td>
        </tr>
        <tr>
          <th>9</th>
          <td>2</td>
          <td>0</td>
        </tr>
        <tr>
          <th>98</th>
          <td>2</td>
          <td>1</td>
        </tr>
        <tr>
          <th>43</th>
          <td>2</td>
          <td>2</td>
        </tr>
        <tr>
          <th>437</th>
          <td>2</td>
          <td>3</td>
        </tr>
        <tr>
          <th>0</th>
          <td>3</td>
          <td>0</td>
        </tr>
        <tr>
          <th>7</th>
          <td>3</td>
          <td>1</td>
        </tr>
        <tr>
          <th>8</th>
          <td>3</td>
          <td>2</td>
        </tr>
        <tr>
          <th>86</th>
          <td>3</td>
          <td>3</td>
        </tr>
        <tr>
          <th>167</th>
          <td>3</td>
          <td>4</td>
        </tr>
        <tr>
          <th>13</th>
          <td>3</td>
          <td>5</td>
        </tr>
        <tr>
          <th>678</th>
          <td>3</td>
          <td>6</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    # 预测这个数据存活的概率
    logreg.predict([[2, 4]])




.. parsed-literal::

    array([1])



.. code:: ipython3

    logreg.predict_proba([[2, 4]])




.. parsed-literal::

    array([[0.35053893, 0.64946107]])



